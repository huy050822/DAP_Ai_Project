from fastapi import APIRouter, HTTPException, WebSocket, WebSocketDisconnect, Depends
from fastapi.responses import JSONResponse
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from ..services.mongodb import MongoDBService
from ..services.websocket import manager
from pydantic import BaseModel
import re

router = APIRouter()

class ChatMessage(BaseModel):
    user_id: str
    message: str

def analyze_query(message: str) -> Dict[str, Any]:
    """Analyze the query type and context from the message"""
    message = message.lower().strip()
    
    # Basic chat patterns
    basic_chat = {
        'ch√†o bu·ªïi s√°ng': 'Ch√†o bu·ªïi s√°ng! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
        'ch√†o bu·ªïi chi·ªÅu': 'Ch√†o bu·ªïi chi·ªÅu! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
        'ch√†o bu·ªïi t·ªëi': 'Ch√†o bu·ªïi t·ªëi! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
        't·∫°m bi·ªát': 'T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n.',
        'c·∫£m ∆°n': 'Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n.'
    }
    
    for key, response in basic_chat.items():
        if key in message:
            return {
                'type': 'chat',
                'message': response
            }

    # Greeting patterns
    greetings = ['hi', 'hello', 'ch√†o', 'xin ch√†o', 'hey']
    if any(greeting in message for greeting in greetings):
        return {
            'type': 'greeting',
            'message': 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n' + 
                      '‚Ä¢ Ph√¢n t√≠ch s·∫£n ph·∫©m b√°n ch·∫°y\n' +
                      '‚Ä¢ Theo d√µi doanh thu\n' +
                      '‚Ä¢ Ph√¢n t√≠ch kh√°ch h√†ng\n' +
                      '‚Ä¢ D·ª± b√°o xu h∆∞·ªõng b√°n h√†ng\n\n' +
                      'B·∫°n mu·ªën bi·∫øt th√¥ng tin g√¨?'
        }

    # Small talk patterns
    small_talk = {
        'kh·ªèe kh√¥ng': 'C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi thƒÉm! T√¥i l√† AI n√™n lu√¥n trong tr·∫°ng th√°i t·ªët ƒë·ªÉ ph·ª•c v·ª• b·∫°n. B·∫°n c·∫ßn gi√∫p g√¨ kh√¥ng?',
        't√™n g√¨': 'T√¥i l√† tr·ª£ l√Ω AI ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng. B·∫°n c·∫ßn ph√¢n t√≠ch g√¨ kh√¥ng?',
        'l√†m ƒë∆∞·ª£c g√¨': 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ Ph√¢n t√≠ch s·∫£n ph·∫©m b√°n ch·∫°y\n‚Ä¢ Theo d√µi doanh thu\n‚Ä¢ Ph√¢n t√≠ch kh√°ch h√†ng\n‚Ä¢ D·ª± b√°o xu h∆∞·ªõng',
        'gi√∫p': 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng. B·∫°n c·∫ßn bi·∫øt th√¥ng tin g√¨?'
    }
    
    for key, response in small_talk.items():
        if key in message:
            return {
                'type': 'chat',
                'message': response
            }

    # Product analysis with enhanced Vietnamese patterns
    product_patterns = [
        r'(s·∫£n ph·∫©m|h√†ng h√≥a|m·∫∑t h√†ng).*(ph·ªï bi·∫øn|b√°n ch·∫°y|xu·∫•t hi·ªán nhi·ªÅu|mua nhi·ªÅu)',
        r'(ph·ªï bi·∫øn|b√°n ch·∫°y|xu·∫•t hi·ªán nhi·ªÅu|mua nhi·ªÅu).*(s·∫£n ph·∫©m|h√†ng h√≥a|m·∫∑t h√†ng)',
        r'(c√°i g√¨|g√¨|m√≥n n√†o).*(b√°n ch·∫°y|mua nhi·ªÅu)',
        r'top.*(s·∫£n ph·∫©m|h√†ng h√≥a)',
        r'(s·∫£n ph·∫©m|h√†ng h√≥a).*(n√†o|g√¨).*(nhi·ªÅu|t·ªët)',
    ]
    
    if any(re.search(pattern, message) for pattern in product_patterns):
        period = 'all_time'
        if 'th√°ng n√†y' in message or 'this month' in message:
            period = 'this_month'
        elif 'th√°ng tr∆∞·ªõc' in message or 'last month' in message:
            period = 'last_month'
            
        trend = None
        if any(word in message for word in ['xu h∆∞·ªõng', 'trend', 'bi·∫øn ƒë·ªông', 'thay ƒë·ªïi']):
            trend = 'trend'
            
        context = 'quantity'
        if any(word in message for word in ['doanh thu', 'ti·ªÅn', 'revenue']):
            context = 'revenue'
            
        return {
            'type': 'top_products',
            'period': period,
            'trend': trend,
            'context': context,
            'intro': 'D·ª±a tr√™n ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng,'
        }
    
    # Revenue analysis with enhanced patterns
    revenue_patterns = [
        r'(doanh thu|doanh s·ªë|b√°n ƒë∆∞·ª£c|thu nh·∫≠p|l·ª£i nhu·∫≠n)',
        r'(b√°n|thu v·ªÅ).*(nhi·ªÅu|bao nhi√™u).*(ti·ªÅn)',
        r'(ti·ªÅn|thu nh·∫≠p).*(bao nhi√™u|nh∆∞ th·∫ø n√†o)',
        r'theo d√µi.*(doanh thu|doanh s·ªë)',
        r'ph√¢n t√≠ch.*(doanh thu|doanh s·ªë)',
        r'(th·ªëng k√™|b√°o c√°o).*(doanh thu|doanh s·ªë)'
    ]
    
    if any(re.search(pattern, message) for pattern in revenue_patterns):
        period = 'all_time'
        trend = None
        
        if any(word in message for word in ['xu h∆∞·ªõng', 'trend', 'bi·∫øn ƒë·ªông', 'thay ƒë·ªïi']):
            trend = 'trend'
        if 'th√°ng n√†y' in message:
            period = 'this_month'
        elif 'th√°ng tr∆∞·ªõc' in message:
            period = 'last_month'
            
        return {
            'type': 'revenue_analysis',
            'period': period,
            'trend': trend,
            'intro': 'Theo s·ªë li·ªáu th·ªëng k√™ t·ª´ h·ªá th·ªëng,'
        }

    # Customer analysis patterns
    customer_patterns = [
        r'(kh√°ch h√†ng|ng∆∞·ªùi mua).*(th√¥ng tin|ph√¢n t√≠ch)',
        r'(ph√¢n t√≠ch|th·ªëng k√™).*(kh√°ch h√†ng)',
        r'(kh√°ch h√†ng|ng∆∞·ªùi mua).*(n√†o|nhi·ªÅu)',
        r'(top|nh·ªØng).*(kh√°ch h√†ng)',
        r'th√¥ng tin.*(kh√°ch h√†ng)'
    ]
    
    if any(re.search(pattern, message) for pattern in customer_patterns):
        return {
            'type': 'customer_analysis',
            'period': 'all_time',
            'intro': 'D·ª±a tr√™n d·ªØ li·ªáu kh√°ch h√†ng,'
        }

    # Forecasting patterns
    forecast_patterns = [
        r'(d·ª± b√°o|d·ª± ƒëo√°n|ph√¢n t√≠ch).*(xu h∆∞·ªõng|trend)',
        r'(xu h∆∞·ªõng|trend).*(b√°n h√†ng|doanh thu)',
        r'(d·ª± b√°o|d·ª± ƒëo√°n).*(doanh thu|b√°n h√†ng)',
        r'(xu h∆∞·ªõng|trend).*(t∆∞∆°ng lai|s·∫Øp t·ªõi)'
    ]

    if any(re.search(pattern, message) for pattern in forecast_patterns):
        return {
            'type': 'forecast',
            'period': 'future',
            'intro': 'D·ª±a tr√™n ph√¢n t√≠ch xu h∆∞·ªõng,'
        }

    # Handle unknown queries more naturally
    return {
        'type': 'chat',
        'message': 'T√¥i hi·ªÉu b·∫°n ƒëang mu·ªën trao ƒë·ªïi, nh∆∞ng t√¥i ch∆∞a ch·∫Øc ch·∫Øn v·ªÅ √Ω c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng? T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n' +
                  '‚Ä¢ Xem s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t\n' +
                  '‚Ä¢ Ph√¢n t√≠ch doanh thu\n' +
                  '‚Ä¢ Xem th√¥ng tin kh√°ch h√†ng\n' +
                  '‚Ä¢ D·ª± b√°o xu h∆∞·ªõng b√°n h√†ng'
    }

@router.post("/chat/message")
async def process_message(
    chat_message: ChatMessage,
    mongodb: MongoDBService = Depends(MongoDBService)
):
    """Process chat messages and return AI response"""
    try:
        query = chat_message.message.strip()
        user_id = chat_message.user_id
        
        if not query:
            return JSONResponse(
                status_code=400,
                content={"status": "error", "message": "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}
            )

        # Analyze query intent
        analysis = analyze_query(query)
        response = ""
        
        # Process based on intent type
        if analysis['type'] == 'top_products':
            results = await mongodb.get_top_products(limit=5)
            if not results:
                response = "Xin l·ªói, hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu v·ªÅ s·∫£n ph·∫©m."
            else:
                response = "D·ª±a tr√™n d·ªØ li·ªáu b√°n h√†ng, ƒë√¢y l√† top 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t:\n\n"
                total_sold = sum(r['total_quantity'] for r in results)
                for i, product in enumerate(results, 1):
                    name = product.get('product_name') or product.get('_id')
                    quantity = product['total_quantity']
                    revenue = product['total_sales']
                    percentage = (quantity / total_sold) * 100 if total_sold else 0
                    response += f"{i}. {name}\n"
                    response += f"   ‚Ä¢ S·ªë l∆∞·ª£ng ƒë√£ b√°n: {quantity:,} s·∫£n ph·∫©m ({percentage:.1f}%)\n"
                    response += f"   ‚Ä¢ Doanh thu: {revenue:,.0f}ƒë\n\n"
                response += "\nB·∫°n c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m n√†o kh√¥ng?"

        elif analysis['type'] == 'greeting':
            response = analysis['message']

        elif analysis['type'] == 'revenue_analysis':
            results = await mongodb.aggregate_orders([
                {
                    '$group': {
                        '_id': None,
                        'total_revenue': {'$sum': '$sales_per_order'},
                        'total_orders': {'$sum': 1},
                        'total_products': {'$sum': '$order_quantity'}
                    }
                }
            ])
            if not results:
                response = "Xin l·ªói, hi·ªán ch∆∞a c√≥ d·ªØ li·ªáu doanh thu."
            else:
                data = results[0]
                response = f"{analysis['intro']}\n\n"
                response += f"üìä T·ªïng doanh thu: {data['total_revenue']:,.0f}ƒë\n"
                response += f"üõçÔ∏è T·ªïng ƒë∆°n h√†ng: {data['total_orders']:,}\n"
                response += f"üì¶ T·ªïng s·∫£n ph·∫©m b√°n ra: {data['total_products']:,}\n\n"
                response += "B·∫°n c√≥ mu·ªën xem th√™m chi ti·∫øt v·ªÅ xu h∆∞·ªõng doanh thu kh√¥ng?"

        elif analysis['type'] == 'customer_analysis':
            results = await mongodb.get_top_customers(limit=5)
            if not results:
                response = "Xin l·ªói, hi·ªán ch∆∞a c√≥ d·ªØ li·ªáu kh√°ch h√†ng."
            else:
                response = f"{analysis['intro']}\n\n"
                response += "üèÜ Top 5 kh√°ch h√†ng c√≥ gi√° tr·ªã mua h√†ng cao nh·∫•t:\n\n"
                for i, customer in enumerate(results, 1):
                    response += f"{i}. {customer['customer_name']}\n"
                    response += f"   üí∞ T·ªïng chi ti√™u: {customer['total_spent']:,.0f}ƒë\n"
                    response += f"   üõçÔ∏è S·ªë ƒë∆°n h√†ng: {customer['total_orders']}\n"
                    response += f"   üìç Khu v·ª±c: {customer['city']}, {customer['state']}\n\n"
                response += "B·∫°n c√≥ mu·ªën xem th√™m th√¥ng tin ph√¢n t√≠ch kh√°ch h√†ng kh√¥ng?"

        elif analysis['type'] == 'forecast':
            results = await mongodb.aggregate_orders([
                {
                    '$group': {
                        '_id': {'$substr': ['$order_date', 6, 4]},  # NƒÉm
                        'year_revenue': {'$sum': '$sales_per_order'}
                    }
                },
                {'$sort': {'_id': 1}}
            ])
            if not results:
                response = "Xin l·ªói, ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± b√°o xu h∆∞·ªõng."
            else:
                trend = "tƒÉng" if results[-1]['year_revenue'] > results[0]['year_revenue'] else "gi·∫£m"
                response = f"{analysis['intro']}\n\n"
                response += f"üìà Xu h∆∞·ªõng doanh thu ƒëang {trend}\n"
                response += "üîç D·ª±a tr√™n ph√¢n t√≠ch c√°c nƒÉm g·∫ßn nh·∫•t:\n\n"
                for r in results:
                    response += f"‚Ä¢ NƒÉm {r['_id']}: {r['year_revenue']:,.0f}ƒë\n"
                response += "\nB·∫°n c√≥ mu·ªën xem chi ti·∫øt d·ª± b√°o theo t·ª´ng s·∫£n ph·∫©m kh√¥ng?"

        elif analysis['type'] == 'chat':
            response = analysis.get('message', 'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.')
        else:
            response = "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ:\n" + \
                      "‚Ä¢ S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t\n" + \
                      "‚Ä¢ Doanh thu theo th·ªùi gian\n" + \
                      "‚Ä¢ Th√¥ng tin kh√°ch h√†ng\n" + \
                      "\nHo·∫∑c g√µ 'h∆∞·ªõng d·∫´n' ƒë·ªÉ xem chi ti·∫øt h∆°n."

        # Save conversation
        await mongodb.save_conversation(
            user_id=user_id,
            message=query,
            response=response
        )

        return {
            "status": "success",
            "response": response
        }

    except Exception as e:
        print(f"Error processing message: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": "ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau."
            }
        )
